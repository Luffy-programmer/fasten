/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityplugin.utils.mappers;

import eu.fasten.analyzer.vulnerabilityplugin.utils.Vulnerability;
import org.dizitart.no2.IndexType;
import org.dizitart.no2.objects.Id;
import org.dizitart.no2.objects.Index;
import org.dizitart.no2.objects.Indices;

import java.io.Serializable;
import java.util.HashSet;

/**
 * Mapper Object to store in the collection of patches.
 * vcsURL follows the specifications found here: https://bit.ly/3gnOzOl
 * Find examples on how to use Nitrite here: https://github.com/nitrite/nitrite-java
 */
@Indices({
        @Index(value = "patchURL", type = IndexType.Unique)
})
public class PatchObject implements Serializable {
    @Id
    String patchURL;
    HashSet<Vulnerability.File> filesChanged;

    public PatchObject() {
    }

    public String getPatchURL() {
        return patchURL;
    }

    public void setPatchURL(String patchURL) {
        this.patchURL = patchURL;
    }

    public HashSet<Vulnerability.File> getFilesChanged() {
        return filesChanged;
    }

    public void setFilesChanged(HashSet<Vulnerability.File> filesChanged) {
        this.filesChanged = filesChanged;
    }
}

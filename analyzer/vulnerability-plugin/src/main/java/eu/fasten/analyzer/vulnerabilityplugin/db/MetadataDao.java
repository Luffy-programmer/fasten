/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityplugin.db;

import com.github.t9t.jooq.json.JsonDSL;
import com.github.t9t.jooq.json.JsonbDSL;
import com.google.gson.JsonObject;
import eu.fasten.analyzer.vulnerabilityplugin.utils.Vulnerability;
import eu.fasten.core.data.metadatadb.codegen.Keys;
import eu.fasten.core.data.metadatadb.codegen.tables.PackageVersions;
import eu.fasten.core.data.metadatadb.codegen.tables.records.PackageVersionsRecord;
import eu.fasten.server.connectors.PostgresConnector;
import netscape.javascript.JSObject;
import org.jooq.*;
import org.json.JSONObject;

import java.sql.SQLException;
import java.util.List;

public class MetadataDao {
    private DSLContext context;

    public MetadataDao(DSLContext context) {
        this.context = context;
    }

    public DSLContext getContext() {
        return this.context;
    }

    public void setContext(DSLContext context) {
        this.context = context;
    }

    /**
     * Given a vulnerability, it adds the information at the Package Version level detail
     * @param v
     */
    public void insertPackageLevelDetail(Vulnerability v) {
        // Step 1: Find ids of packages that need to contain the information
        List<Long> packageVersionsIds = findVulnerablePackageVersion(v);
        // Step 2: For each package version id, update the metadata with the new information
        for (Long packageId : packageVersionsIds) {
            updatePackageVersionMetadata(packageId, new JSONObject(v.toJson()));
        }
    }

    public List<Long> findVulnerablePackageVersion(Vulnerability v) {
        return null;
    }

    public void updatePackageVersionMetadata(Long id, JSONObject metadata) {
        var metadataJsonb = metadata != null ? JSONB.valueOf(metadata.toString()) : null;
        // Step 1: Get the JSON from old one
        PackageVersionsRecord res = (PackageVersionsRecord) context.select().from(PackageVersions.PACKAGE_VERSIONS)
                .where(PackageVersions.PACKAGE_VERSIONS.ID.equal(id)).fetchOne();
        JSONObject obj1 = new JSONObject(res.getMetadata().data());
        JSONObject obj2 = new JSONObject(metadataJsonb.data());

        obj1.put("vulnerabilities", obj2);
        // Step 2: Append JSON to old one
        // Step 3: Update the old JSON with the new one
        var objJSONb = obj1 != null ? JSONB.valueOf(obj1.toString()) : null;
        context.update(PackageVersions.PACKAGE_VERSIONS)
                .set(PackageVersions.PACKAGE_VERSIONS.METADATA, objJSONb)
                .where(PackageVersions.PACKAGE_VERSIONS.ID.equal(1L)).execute();
    }

    /**
     * In order to connect to Postgres, an env variable need to be set when
     * running the Plugin
     * @param args
     * @throws SQLException
     */
    public static void main(String[] args) throws SQLException {
        var dbUrl = "jdbc:postgresql://localhost:5432/metadata_test";
        var dbUser = "postgres";
        var context = PostgresConnector.getDSLContext(dbUrl, dbUser);
        Vulnerability v = new Vulnerability("CVE-TEST");

        JSONObject vJSON = new JSONObject(v.toJson());
        MetadataDao md = new MetadataDao(context);
        md.updatePackageVersionMetadata(1L, vJSON);
    }
}

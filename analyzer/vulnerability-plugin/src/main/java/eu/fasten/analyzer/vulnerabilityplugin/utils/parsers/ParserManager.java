/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityplugin.utils.parsers;

import com.mongodb.client.MongoDatabase;
import eu.fasten.analyzer.vulnerabilityplugin.utils.PatchFarmer;
import eu.fasten.analyzer.vulnerabilityplugin.utils.Vulnerability;
import eu.fasten.analyzer.vulnerabilityplugin.utils.connections.JavaHttpClient;
import org.jooq.tools.json.JSONParser;

import java.util.HashMap;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;

/**
 * The responsibility of the ParserManager is to gather Vulnerabilities from all the parsers.
 * Combine them together, merging what is necessary and the handing them over to the PatchFarmer to enrich
 * every single vulnerability with information about patches specifically.
 */
public class ParserManager {
    private ExtraParser extraParser;
    private GHParser ghParser;
    private NVDParser nvdParser;
    private PatchFarmer patchFarmer;

    public ParserManager(JavaHttpClient client, MongoDatabase mongoDatabase, String ghToken) {
        this.extraParser = new ExtraParser(client);
        this.ghParser = new GHParser(client, ghToken);
        this.nvdParser = new NVDParser(new JSONParser(), client);
        this.patchFarmer = new PatchFarmer(mongoDatabase, client);
    }

    /**
     * Combines the results of all the parsers.
     * @return set of vulnerability objects containing all the information found.
     */
    public HashSet<Vulnerability> getVulnerabilitiesFromParsers() {
        HashSet<Vulnerability> vulnerabilities = new HashSet<>();
        HashMap<String, Vulnerability> mapFromGH = ghParser.getVulnerabilitiesFromGH();
        HashMap<String, Vulnerability> mapFromExtraSources = extraParser.getVulnerabilitiesFromExtraSources();
        HashMap<String, Vulnerability> mapFromNVD = nvdParser.getVulnerabilitiesFromNVD();

        for (String vId : mapFromNVD.keySet()) {
            Vulnerability v = mapFromNVD.get(vId);
            if (mapFromGH.containsKey(vId)) {
                v.merge(mapFromGH.get(vId));
                mapFromGH.remove(vId);
            }
            if (mapFromExtraSources.containsKey(vId)) {
                v.merge(mapFromExtraSources.get(vId));
                mapFromExtraSources.remove(vId);
            }
            vulnerabilities.add(v);
        }

        for (String vId : mapFromGH.keySet()) {
            Vulnerability v = mapFromGH.get(vId);
            if (mapFromExtraSources.containsKey(vId)) {
                v.merge(mapFromExtraSources.get(vId));
                mapFromExtraSources.remove(vId);
            }
            vulnerabilities.add(v);
        }

        for (String vId : mapFromExtraSources.keySet()) {
            vulnerabilities.add(mapFromExtraSources.get(vId));
        }

        for (Vulnerability v : vulnerabilities) {
            patchFarmer.parseReferences(v);
        }

        return vulnerabilities;
    }

    /**
     * Get updates from all the different parsers and return them.
     * @return set of vulnerabilities, including new ones and changed ones.
     */
    public HashSet<Vulnerability> getVulnerabilitiesUpdates() {
        return null;
    }

    /**
     * Helper function for the vulnerability Plugin to inject the sleep behaviour.
     * This way, when mocking the parser, you can just skip over the wait.
     */
    public void sleep() {
        try {
            TimeUnit.DAYS.sleep(1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * Helper method to inject parsers and test the merging of the three sources.
     * @param nvdParser - NVDParser
     * @param ghParser - GHParser
     * @param extraParser - ExtraParser
     * @param patchFarmer - PatchFarmer
     */
    public void injectParsers(NVDParser nvdParser,
                              GHParser ghParser,
                              ExtraParser extraParser,
                              PatchFarmer patchFarmer) {
        this.nvdParser = nvdParser;
        this.ghParser = ghParser;
        this.extraParser = extraParser;
        this.patchFarmer = patchFarmer;
    }
}

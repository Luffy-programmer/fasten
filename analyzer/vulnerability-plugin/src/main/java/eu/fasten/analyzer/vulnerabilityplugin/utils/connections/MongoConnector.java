/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityplugin.utils.connections;

import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoDatabase;

import java.util.Arrays;


public class MongoConnector {

    /**
     * Helper class to wrap the Mongo Context to connect to.
     */
    public static class MongoContext {
        String username;
        String dbAuth;
        String pass;
        String dbName;

        /**
         * Constructor for a MongoContext.
         *
         * @param username - to connect to Mongodb
         * @param dbAuth   - database to authenticate the user
         * @param pass     - password of the user
         * @param dbName   - database to connect to
         */
        public MongoContext(String username, String dbAuth, String pass, String dbName) {
            this.username = username;
            this.dbAuth = dbAuth;
            this.pass = pass;
            this.dbName = dbName;
        }
    }

    /**
     * Connects to instance of GHTorrent running on monster.
     *
     * @param context - includes the information to instantiate a connection.
     * @return MongoDatabase object, ready to use to connect to collections
     */
    public static MongoDatabase getMongoCollection(String host, MongoContext context) {
        String user = context.username; // the user name
        String database = context.dbAuth; // the name of the database in which the user is defined
        char[] password = context.pass.toCharArray(); // the password as a character array
        MongoCredential credential = MongoCredential.createCredential(user, database, password);
        // Connects by default to localhost - port 27017
        MongoClient mongoClient = new MongoClient(new ServerAddress(host, 27017),
                Arrays.asList(credential));
        // Connects to database
        MongoDatabase db = mongoClient.getDatabase(context.dbName);
        return db;
    }
}

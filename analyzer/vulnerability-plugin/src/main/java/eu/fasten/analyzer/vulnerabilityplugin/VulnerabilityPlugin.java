package eu.fasten.analyzer.vulnerabilityplugin;

import eu.fasten.core.plugins.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.pf4j.Extension;
import org.pf4j.Plugin;
import org.pf4j.PluginWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class VulnerabilityPlugin extends Plugin {

    public VulnerabilityPlugin(PluginWrapper wrapper) {
        super(wrapper);
    }

    @Extension
    public static class VulnerabilityProducer implements KafkaProducer {

        private Logger logger = LoggerFactory.getLogger(getClass());
        String produceTopic = "vulnerability";
        private static org.apache.kafka.clients.producer.KafkaProducer<Object, String>
                kafkaProducer;

        @Override
        public String producerTopic() {
            return this.produceTopic;
        }

        @Override
        public void setKafkaProducer(org.apache.kafka.clients.producer.KafkaProducer<Object, String> producer) {
            kafkaProducer = producer;
        }

        @Override
        public void setProducerTopic(String topicName) {
            this.produceTopic = topicName;
        }

        public void sendToKafka(final String number) {
            logger.debug("Writing the number " + number + " to Kafka");
            final ProducerRecord<Object, String> record = new ProducerRecord<Object, String>(
                    this.producerTopic(),
                    number,
                    number
            );

            // Callback
            kafkaProducer.send(record, (recordMetadata, e) -> {
                if (recordMetadata != null) {
                    logger.debug("Sent: {} to {}", number.hashCode(), this.producerTopic());
                } else {
                    setPluginError(e);
                    logger.error("Failed to write message to Kafka: " + e.getMessage(), e);
                }
            });

        }

        @Override
        public String name() {
            return null;
        }

        @Override
        public String description() {
            return null;
        }

        @Override
        public void start() {
            // Step 1: Populate text file with numbers from 1 to 10 and write it to memory
            List<String> test = Arrays.asList("1", "2", "3", "4", "5", "6", "7", "8", "9", "10");

            for(int i = 0; i < 10; i++) {
                sendToKafka(test.get(i));
            }

            // Step 2: Start a new Thread that writes a number to the file every 3 seconds
            UpdaterThread ut = new UpdaterThread();
            ut.start();
        }

        @Override
        public void stop() {

        }

        @Override
        public void setPluginError(Throwable throwable) {
            System.out.println("Could not send to Kafka topic");
        }

        @Override
        public String getPluginError() {
            return null;
        }

        @Override
        public void freeResource() {

        }
    }

    static class UpdaterThread implements Runnable {

        Thread thread;

        public void start() {
            thread = new Thread(this);
            thread.start();
        }

        @Override
        public void run() {
            VulnerabilityProducer vp = new VulnerabilityProducer();
            Integer i = 11;
            while (true) {
                vp.sendToKafka(i.toString());
                i += 1;
                try {
                    TimeUnit.SECONDS.sleep(3);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}



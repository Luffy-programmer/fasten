/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityplugin;

import com.mongodb.client.MongoDatabase;
import eu.fasten.analyzer.vulnerabilityplugin.utils.JavaHttpClient;
import eu.fasten.analyzer.vulnerabilityplugin.utils.MongoConnector;
import eu.fasten.analyzer.vulnerabilityplugin.utils.Parser;
import eu.fasten.analyzer.vulnerabilityplugin.utils.Vulnerability;
import eu.fasten.core.plugins.KafkaPlugin;
import org.owasp.dependencycheck.data.nvd.json.DefCveItem;
import org.owasp.dependencycheck.utils.Settings;
import org.owasp.dependencycheck.utils.Downloader;
import org.pf4j.Extension;
import org.pf4j.Plugin;
import org.pf4j.PluginWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.TimeUnit;

public class VulnerabilityPlugin extends Plugin {

    public VulnerabilityPlugin(PluginWrapper wrapper) {
        super(wrapper);
    }

    @Extension
    public static class VulnerabilityProducer implements KafkaPlugin<String, String> {

        private String produceTopic = "vulnerability";
        private Throwable pluginError = null;
        private Boolean firstTime = true;
        private Parser parser;
        private static Queue<Vulnerability> queue = new LinkedList<>();

        @Override
        public String name() {
            return "Vulnerability Plugin";
        }

        @Override
        public String description() {
            return "Vulnerability plugin. "
                    + "Downloads CVE entries from the NVD Database, enriches"
                    + " them with method-level details and publishes to Kafka topic";
        }

        @Override
        public String version() {
            return "1.0";
        }

        /**
         * Sets the connection to Mongodb instance.
         * @param mongoContext - See MongoContext class for reference.
         */
        public void setMongoConnection(MongoConnector.MongoContext mongoContext) {
            MongoDatabase mongoDatabase = MongoConnector.getMongoCollection(mongoContext);
            // Also inject Http Client
            JavaHttpClient client = new JavaHttpClient();
            parser = new Parser(mongoDatabase, client);
        }

        @Override
        public void start() {

        }

        @Override
        public void stop() {

        }

        public void setPluginError(Throwable throwable) {
            this.pluginError = throwable;
        }

        @Override
        public Throwable getPluginError() {
            return this.pluginError;
        }

        @Override
        public void freeResource() {

        }

        @Override
        public Optional<List<String>> consumeTopic() {
            return Optional.empty();
        }

        @Override
        public void setTopic(String topicName) {
            this.produceTopic = topicName;
        }

        @Override
        public void consume(String record) {

        }

        @Override
        public Optional<String> produce() {
            if (firstTime) {
                ProducerThread pt = new ProducerThread(queue, parser);
                pt.start();
                firstTime = false;
                return Optional.empty();
            } else {
                while (queue.isEmpty()) {
                    firstTime = false;
                }
                return Optional.of(queue.poll().toJson());
            }
        }
    }

    static class ProducerThread implements Runnable {

        Thread thread;
        Logger logger = LoggerFactory.getLogger(getClass());
        Queue<Vulnerability> queue;
        Parser parser;

        public ProducerThread(Queue<Vulnerability> queue, Parser parser) {
            this.queue = queue;
            this.parser = parser;
        }

        public void start() {
            thread = new Thread(this);
            thread.start();
        }

        @Override
        public void run() {
            List<File> paths = null;

            // Step 1: Download all gzip files from NVD
            try {
                paths = parser.downloadCVEs(new Downloader(new Settings(new Properties())));
            } catch (Exception e) {
                logger.error("Unable to download the resources");
            }

            // Step 2: Parse them into DefCveItems
            List<DefCveItem> rawCves = new ArrayList<>();
            try {
                for (File path : paths) {
                    rawCves.addAll(parser.parseCVEZip(path));
                }
            } catch (IOException e) {
                System.out.println("Error while parsing gzip files");
            }

            // Step 3: Translate into Vulnerability class
            for (DefCveItem item : rawCves) {
                queue.add(parser.parseVulnerability(item));
            }

            // Step 5: Start a new Thread that checks for updates every day and writes new vulnerabilities
            UpdaterThread ut = new UpdaterThread(queue, parser);
            ut.start();
        }
    }

    static class UpdaterThread implements Runnable {

        Thread thread;
        Queue<Vulnerability> queue;
        Parser parser;

        public UpdaterThread(Queue<Vulnerability> queue, Parser parser) {
            this.queue = queue;
            this.parser = parser;
        }

        public void start() {
            thread = new Thread(this);
            thread.start();
        }

        @Override
        public void run() {
            while (true) {
                try {
                    System.out.println("SLEEPING");
                    // Step 1: Sleep for a day
                    TimeUnit.DAYS.sleep(1);

                    // Step 2: Download the NVD modified JSON Feed
                    Downloader downloader = new Downloader(new Settings(new Properties()));
                    File pathToUpdates = parser.downloadUpdates(downloader);

                    // Step 3: Parse and enqueue the new and the modified entries
                    List<DefCveItem> rawUpdates = parser.parseCVEZip(pathToUpdates);
                    for (DefCveItem item : rawUpdates) {
                        queue.add(parser.parseVulnerability(item));
                    }
                } catch (Exception e) {
                    System.out.println("Could not run updater");
                }
            }
        }
    }
}



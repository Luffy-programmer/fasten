/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityplugin;

import com.mongodb.client.MongoDatabase;
import eu.fasten.analyzer.vulnerabilityplugin.db.NitriteController;
import eu.fasten.analyzer.vulnerabilityplugin.utils.connections.JavaHttpClient;
import eu.fasten.analyzer.vulnerabilityplugin.utils.connections.MongoConnector;
import eu.fasten.analyzer.vulnerabilityplugin.utils.Vulnerability;
import eu.fasten.analyzer.vulnerabilityplugin.utils.parsers.ParserManager;
import eu.fasten.core.plugins.KafkaPlugin;
import org.pf4j.Extension;
import org.pf4j.Plugin;
import org.pf4j.PluginWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.concurrent.TimeUnit;

public class VulnerabilityPlugin extends Plugin {

    public VulnerabilityPlugin(PluginWrapper wrapper) {
        super(wrapper);
    }

    @Extension
    public static class VulnerabilityProducer implements KafkaPlugin<String, String> {

        private String produceTopic = "security";
        private Throwable pluginError = null;
        private Boolean firstTime = true;
        private ParserManager parserManager;
        private ProducerThread pt;
        private static Queue<Vulnerability> queue = new LinkedList<>();
        private final Logger logger = LoggerFactory.getLogger(VulnerabilityProducer.class.getName());

        /**
         * Getter necessary to handle stopping of the Updater Thread
         *
         * @return ProducerThread Object that contains an UpdaterThread
         */
        public ProducerThread getProducerThread() {
            return pt;
        }

        @Override
        public String name() {
            return "Vulnerability Plugin";
        }

        @Override
        public String description() {
            return "Vulnerability plugin. "
                    + "Downloads CVE entries from the NVD Database, enriches"
                    + " them with method-level details and publishes to Kafka topic";
        }

        @Override
        public String version() {
            return "1.0";
        }

        /**
         * Sets the connection to Mongodb instance.
         *
         * @param mongoContext - See MongoContext class for reference.
         */
        public void createParserManager(String host, MongoConnector.MongoContext mongoContext) {
            MongoDatabase mongoDatabase = MongoConnector.getMongoCollection(host, mongoContext);
            JavaHttpClient client = new JavaHttpClient();
            String ghToken = "55db74d446cf4028138ca34802004bb5c45d4027";
            NitriteController nc = new NitriteController();
            parserManager = new ParserManager(client, mongoDatabase, ghToken, nc);
        }

        /**
         * Helper method to inject the parser in the Plugin.
         * Facilitates testing.
         *
         * @param parser - parser to inject
         */
        public void injectParserManager(ParserManager parser) {
            this.parserManager = parser;
        }

        @Override
        public void start() {

        }

        @Override
        public void stop() {

        }

        public void setPluginError(Throwable throwable) {
            this.pluginError = throwable;
        }

        @Override
        public Throwable getPluginError() {
            return this.pluginError;
        }

        @Override
        public void freeResource() {

        }

        @Override
        public Optional<List<String>> consumeTopic() {
            return Optional.empty();
        }

        @Override
        public void setTopic(String topicName) {
            this.produceTopic = topicName;
        }

        @Override
        public void consume(String record) {

        }

        @Override
        public Optional<String> produce() {
            if (firstTime) {
                pt = new ProducerThread(queue, parserManager);
                pt.start();
                firstTime = false;
                return Optional.empty();
            } else {
                while (queue.isEmpty()) {
                    // do nothing, waiting for the queue to get some elements
                }
                return Optional.of(queue.poll().toJson());
            }
        }
    }

    static class ProducerThread implements Runnable {

        Thread thread;
        Logger logger = LoggerFactory.getLogger(getClass());
        Queue<Vulnerability> queue;
        ParserManager parser;
        UpdaterThread ut;

        public ProducerThread(Queue<Vulnerability> queue, ParserManager parser) {
            this.queue = queue;
            this.parser = parser;
        }

        public UpdaterThread getUpdater() {
            return ut;
        }

        public void start() {
            thread = new Thread(this);
            thread.start();
        }

        @Override
        public void run() {
            // Get all the vulnerabilities from the Parsers and enqueue them
            logger.info("Gathering information from all parsers");
            HashSet<Vulnerability> vulnerabilities = parser.getVulnerabilitiesFromParsers();
            for (Vulnerability v : vulnerabilities) {
                queue.add(v);
            }

            // Start a new Thread that checks
            // for updates every day and writes new vulnerabilities
            logger.info("Starting the Updater Thread");
            ut = new UpdaterThread(queue, parser);
            ut.start();
        }
    }

    static class UpdaterThread implements Runnable {

        Thread thread;
        Queue<Vulnerability> queue;
        ParserManager parser;
        Logger logger = LoggerFactory.getLogger(getClass());
        private volatile boolean exit = false;

        public UpdaterThread(Queue<Vulnerability> queue, ParserManager parser) {
            this.queue = queue;
            this.parser = parser;
        }

        public void start() {
            thread = new Thread(this);
            thread.start();
        }

        public void terminate() {
            exit = true;
        }

        @Override
        public void run() {
            while (!exit) {
                try {
                    // Step 1: Sleep for a day
                    // Injected into parser logic in order to test
                    parser.sleep();

                    // Get updates and inject them as well
                    HashSet<Vulnerability> updates = parser.getUpdatesFromParsers();
                    for (Vulnerability v : updates) {
                        queue.add(v);
                    }
                } catch (Exception e) {
                    System.out.println("Could not run updater");
                }
            }
        }
    }
}



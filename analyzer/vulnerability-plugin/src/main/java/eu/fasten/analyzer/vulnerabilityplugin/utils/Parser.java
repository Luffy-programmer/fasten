package eu.fasten.analyzer.vulnerabilityplugin.utils;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import org.jooq.tools.json.JSONParser;
import org.jooq.tools.json.ParseException;
import org.jooq.tools.json.JSONObject;
import org.owasp.dependencycheck.data.nvd.json.DefCpeMatch;
import org.owasp.dependencycheck.data.nvd.json.DefCveItem;
import org.owasp.dependencycheck.data.nvd.json.DefNode;
import org.owasp.dependencycheck.utils.*;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.LocalDate;
import java.util.*;
import java.util.zip.GZIPInputStream;
import static java.nio.charset.StandardCharsets.UTF_8;

public class Parser {

    private static JSONParser jsonParser;

    public Parser() {
        this.jsonParser = new JSONParser();
    }

    /**
     * Unzip and Parsing of NVD Json information.
     * @param gzip File with path pointing to the GZIP file
     * e.g. File raw = new File("./analyzer/vulnerability-plugin/src/main/resources/nvdcve-1.1-2005.json.gz");
     * @throws IOException
     * @return List of Vulnerabilities parsed
     */
    public static List<DefCveItem> parseCVEZip(File gzip) throws IOException {

        List<DefCveItem> cves = new ArrayList<DefCveItem>();

        InputStream fin = new FileInputStream(gzip);
        InputStream in = new GZIPInputStream(fin);
        InputStreamReader isr = new InputStreamReader(in, UTF_8);
        JsonReader reader = new JsonReader(isr);

        final Gson gson = new GsonBuilder().create();
        reader.beginObject();

        while (reader.hasNext() && !JsonToken.BEGIN_ARRAY.equals(reader.peek())) {
            reader.skipValue();
        }
        reader.beginArray();
        while (reader.hasNext()) {
            cves.add(gson.fromJson(reader, DefCveItem.class));
        }
        return cves;
    }

    /**
     * Downloads CVE json Data Feed from 2002 until current year.
     * @param downloader - dependency injection for testing
     * @return a list of the paths where the gzip files are stored.
     * @throws MalformedURLException
     * @throws TooManyRequestsException
     * @throws DownloadFailedException
     * @throws ResourceNotFoundException
     */
    public static List<File> downloadCVEs(Downloader downloader) throws MalformedURLException,
                                             TooManyRequestsException,
                                             DownloadFailedException,
                                             ResourceNotFoundException {
        int currentYear = LocalDate.now().getYear();
        List<File> paths = new ArrayList<>();
        for (int i = 2002; i <= currentYear; i++) {
            URL cve_url = new URL("https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-" + i + ".json.gz");
            File out_path = new File("./analyzer/vulnerability-plugin/src/main/resources/nvd/nvdcve-1.1-" + i + ".json.gz");
            downloader.fetchFile(cve_url, out_path);
            paths.add(out_path);
        }
        return paths;
    }

    /**
     * Downloads updates from NVD JSON Data Feed.
     * @param downloader - dependency injection for testing
     * @return Path to the saved file
     * @throws MalformedURLException
     * @throws TooManyRequestsException
     * @throws DownloadFailedException
     * @throws ResourceNotFoundException
     */
    public static File downloadUpdates(Downloader downloader) throws MalformedURLException,
                                            TooManyRequestsException,
                                            DownloadFailedException,
                                            ResourceNotFoundException {
        URL updates_url = new URL("https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz");
        File out_path = new File("./analyzer/vulnerability-plugin/src/main/resources/nvd/nvdcve-1.1-modified.json.gz");
        downloader.fetchFile(updates_url, out_path);
        return out_path;
    }

    /**
     * Parses cpe23Uri String extracting necessary information.
     * @param vulnerability - Vulnerability Object to inject cpe23Uri
     * @param cpe23Uri - String to parse
     */
    public static void injectCpeInfo(Vulnerability vulnerability, String cpe23Uri) {
        String[] data = cpe23Uri.split(":");
        String vendor = data[3];
        String product = data[4];
        String version = data[5];

        // Add Cpe23Uri to Vulnerability Object
        vulnerability.addCpeUri(new Vulnerability.Cpe23Uri(vendor, product, version));
    }

    /**
     * Sends GET request to vulncode-db and retrieves relevant files.
     * @param cveId - ID of the CVE entry to query.
     * @param client - JavaHttpClient, injectable to facilitate testing.
     * @return List<String> containing files.
     */
    public static List<String> getRelevantFiles(String cveId, JavaHttpClient client) {
        List<String> files = new ArrayList<>();
        String json_body = null;
        try {
            json_body = client.sendGet("https://www.vulncode-db.com/api/v1/" + cveId);
        } catch (Exception e) {
            System.out.println("Error: Invalid endpoint");
        }
        try {
            Object obj = jsonParser.parse(json_body);
            JSONObject payload = (JSONObject) obj;
            Object master_commit_obj = payload.get("master_commit");
            JSONObject master_commit = (JSONObject) master_commit_obj;
            if (master_commit != null && master_commit.get("relevant_files") != null) {
                files = (List<String>) master_commit.get("relevant_files");
            }
        } catch (ParseException e) {
            System.out.println("Error while parsing");
        }
        return files;
    }

    /**
     * Extracts information from each DefCveItem and inject it into Vulnerability Objects
     * @param cveItems - see DefCveItem class for more information
     * @return a list of Vulnerabilities, ready to be produced by the plugin
     */
    public static List<Vulnerability> parseVulnerabilities(List<DefCveItem> cveItems) {
        List<Vulnerability> vulnerabilities = new ArrayList<>();
        Parser parser = new Parser();
        for (DefCveItem cveItem : cveItems) {
            System.out.println("Pumping: " + cveItem.getCve().getCVEDataMeta().getId());
            Vulnerability vulnerability = new Vulnerability(cveItem.getCve().getCVEDataMeta().getId());
            vulnerability.setDescription(cveItem.getCve().getDescription().getDescriptionData().get(0).getValue());
            if (cveItem.getImpact().getBaseMetricV2() != null) {
                vulnerability.setScoreCVSS2(cveItem.getImpact().getBaseMetricV2().getCvssV2().getBaseScore());
            }
            if (cveItem.getImpact().getBaseMetricV3() != null) {
                vulnerability.setScoreCVSS3(cveItem.getImpact().getBaseMetricV3().getCvssV3().getBaseScore());
            }
            vulnerability.setPublishedDate(cveItem.getPublishedDate());
            vulnerability.setLastModifiedDate(cveItem.getLastModifiedDate());
            for (DefNode node : cveItem.getConfigurations().getNodes()) {
                for (DefCpeMatch match : node.getCpeMatch()) {
                    injectCpeInfo(vulnerability, match.getCpe23Uri());
                }
            }
            cveItem.getCve().getReferences().getReferenceData().forEach((link) -> vulnerability.addReference(link.getUrl()));
            vulnerability.setVulnerable_files(parser.getRelevantFiles(vulnerability.getId(), new JavaHttpClient()));

            vulnerabilities.add(vulnerability);
        }
        return vulnerabilities;
    }
}

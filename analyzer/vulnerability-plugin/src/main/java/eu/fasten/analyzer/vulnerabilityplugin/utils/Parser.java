package eu.fasten.analyzer.vulnerabilityplugin.utils;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import org.owasp.dependencycheck.data.nvd.json.DefCpeMatch;
import org.owasp.dependencycheck.data.nvd.json.DefCveItem;
import org.owasp.dependencycheck.data.nvd.json.DefNode;
import org.owasp.dependencycheck.utils.*;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.zip.GZIPInputStream;
import static java.nio.charset.StandardCharsets.UTF_8;

public class Parser {

    /**
     * Parses the method-level detail information contained in raw.json.
     * The information was parsed from vulncode-db.com.
     * @return a map:
     * key = CVE identifier
     * value = vulnerable methods
     */
    protected HashMap<String, List<String>> getMethodLevelDetail() {
        File raw = new File("./analyzer/vulnerability-plugin/src/main/resources/raw.json");
        HashMap<String, List<String>> result = null;
        try {
            result = new ObjectMapper().readValue(raw, HashMap.class);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }

    /**
     * Unzip and Parsing of NVD Json information.
     * @param gzip File with path pointing to the GZIP file
     * e.g. File raw = new File("./analyzer/vulnerability-plugin/src/main/resources/nvdcve-1.1-2005.json.gz");
     * @throws IOException
     * @return List of Vulnerabilities parsed
     */
    public static List<DefCveItem> parseCVEZip(File gzip) throws IOException {

        List<DefCveItem> cves = new ArrayList<DefCveItem>();

        InputStream fin = new FileInputStream(gzip);
        InputStream in = new GZIPInputStream(fin);
        InputStreamReader isr = new InputStreamReader(in, UTF_8);
        JsonReader reader = new JsonReader(isr);

        final Gson gson = new GsonBuilder().create();
        reader.beginObject();

        while (reader.hasNext() && !JsonToken.BEGIN_ARRAY.equals(reader.peek())) {
            reader.skipValue();
        }
        reader.beginArray();
        while (reader.hasNext()) {
            cves.add(gson.fromJson(reader, DefCveItem.class));
        }
        return cves;
    }

    /**
     * Downloads all gz files from NVD and puts them under resources/nvd.
     * @throws MalformedURLException
     * @throws TooManyRequestsException
     * @throws DownloadFailedException
     * @throws ResourceNotFoundException
     */
    public static File downloadCVEs() throws MalformedURLException,
                                             TooManyRequestsException,
                                             DownloadFailedException,
                                             ResourceNotFoundException {
        Settings settings = new Settings(new Properties());
        Downloader downloader = new Downloader(settings);
        URL cve_2005_test = new URL("https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2005.json.gz");
        File out_path = new File("./analyzer/vulnerability-plugin/src/main/resources/nvd/nvdcve-1.1-2005.json.gz");
        downloader.fetchFile(cve_2005_test, out_path);
        return out_path;
    }

    /**
     * Parses cpe23Uri String extracting necessary information.
     * @param vulnerability - Vulnerability Object to inject cpe23Uri
     * @param cpe23Uri - String to parse
     */
    protected static void injectCpeInfo(Vulnerability vulnerability, String cpe23Uri) {
        String[] data = cpe23Uri.split(":");
        String vendor = data[3];
        String product = data[4];
        String version = data[5];

        // Add Cpe23Uri to Vulnerability Object
        vulnerability.addCpeUri(new Vulnerability.Cpe23Uri(vendor, product, version));
    }

    /**
     * Extracts information from each DefCveItem and inject it into Vulnerability Objects
     * @param cveItems - see DefCveItem class for more information
     * @return a list of Vulnerabilities, ready to be produced by the plugin
     */
    public static List<Vulnerability> parseVulnerabilities(List<DefCveItem> cveItems) {
        List<Vulnerability> vulnerabilities = new ArrayList<>();
        for (DefCveItem cveItem : cveItems) {
            Vulnerability vulnerability = new Vulnerability(cveItem.getCve().getCVEDataMeta().getId());
            vulnerability.setDescription(cveItem.getCve().getDescription().getDescriptionData().get(0).getValue());
            if (cveItem.getImpact().getBaseMetricV2() != null) {
                vulnerability.setScoreCVSS2(cveItem.getImpact().getBaseMetricV2().getCvssV2().getBaseScore());
            }
            if (cveItem.getImpact().getBaseMetricV3() != null) {
                vulnerability.setScoreCVSS3(cveItem.getImpact().getBaseMetricV3().getCvssV3().getBaseScore());
            }
            vulnerability.setPublishedDate(cveItem.getPublishedDate());
            vulnerability.setLastModifiedDate(cveItem.getLastModifiedDate());
            for (DefNode node : cveItem.getConfigurations().getNodes()) {
                for (DefCpeMatch match : node.getCpeMatch()) {
                    injectCpeInfo(vulnerability, match.getCpe23Uri());
                }
            }
            cveItem.getCve().getReferences().getReferenceData().forEach((link) -> vulnerability.addReference(link.getUrl()));
            // TODO: Add method-level details

            vulnerabilities.add(vulnerability);
        }
        return vulnerabilities;
    }

    /**
     * This main function is for testing purposes
     * @param args
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {
        File raw = new File("./analyzer/vulnerability-plugin/src/main/resources/nvdcve-1.1-2005.json.gz");
        List<DefCveItem> cves = Parser.parseCVEZip(raw);
        for(Vulnerability v: Parser.parseVulnerabilities(cves)) {
            System.out.println(v.toString());
        }

//        System.out.println(cves.get(0).getImpact().toString());
    }
}

package eu.fasten.analyzer.vulnerabilityplugin.utils;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.opencsv.CSVReader;
import eu.fasten.analyzer.vulnerabilityplugin.utils.connections.JavaHttpClient;
import eu.fasten.analyzer.vulnerabilityplugin.utils.mappers.JSONHandler;
import org.apache.commons.lang3.StringUtils;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.jooq.tools.json.JSONObject;
import org.jooq.tools.json.JSONParser;
import org.jooq.tools.json.ParseException;

import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static com.mongodb.client.model.Filters.and;
import static com.mongodb.client.model.Filters.eq;

/**
 * This class will gather ANY possible source of commits:
 * MSR 2019 SAP paper
 * copernico oss_vulnerabilities
 * vulncode-db
 */
public class PatchFarmer {

    public static JSONParser jsonParser;
    public static MongoCollection<Document> mongoCommitsCollection;
    public static MongoCollection<Document> mongoPullRequestsCollection;
    public static MongoCollection<Document> mongoIssuesCollection;
    public static JavaHttpClient httpClient;

    /**
     * Takes a MongoDatabase object to connect and retrieve collections from.
     */
    public PatchFarmer(MongoDatabase db, JavaHttpClient client) {
        httpClient = client;
        jsonParser = new JSONParser();
        mongoCommitsCollection = db.getCollection("commits");
        mongoPullRequestsCollection = db.getCollection("pull_requests");
        mongoIssuesCollection = db.getCollection("issues");
    }

    /**
     * Given two string representing dates, returns the difference in time between them.
     *
     * @param date          of the commit
     * @param publishedDate when the vulnerability was published
     * @return days it took to fix the vulnerability
     */
    private Long getDurationFixing(String date, String publishedDate) {
        String dateCommitString = date.substring(0, 10);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date dateCommit = sdf.parse(dateCommitString);
            Date datePublished = sdf.parse(publishedDate);
            long diff = dateCommit.getTime() - datePublished.getTime();
            return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
        } catch (java.text.ParseException e) {
            System.out.println("Date format is wrong");
        }
        return null;
    }

    /**
     * Extracts information from Pull Request links.
     * First queries GHTorrent and if nothing is found use Github API
     *
     * @param vulnerability object to inject information
     * @param pr            github link to the pull request
     */
    public void parsePullRequest(Vulnerability vulnerability, String pr) {
        String jsonBody = null;
        try {
            // Extract information from the patch and create API Link
            String[] infoPatch = pr.split("/");
            String repoOwner = infoPatch[3];
            String repoName = infoPatch[4];
            String prNumber = infoPatch[6];
            // Query GHTorrent to find the corresponding Pull Request
            Bson filter = and(eq("repo", repoName),
                    eq("owner", repoOwner),
                    eq("number", prNumber));
            FindIterable<Document> mongoElement = mongoPullRequestsCollection.find(filter);
            if (mongoElement.first() != null) {
                jsonBody = mongoElement.first().toJson();
            }

            // If GhTorrent does not find it, query Github API
            if (jsonBody == null) {
                String apiLink = "https://api.github.com/repos/" + repoOwner + "/" + repoName + "/pulls/" + prNumber;
                // Send GET request
                jsonBody = httpClient.sendGet(apiLink);
                // TODO: If it was not on GHTorrent, write it in there (?)
            }

            // Look for a merge_commit_sha and use the parseCommit function
            // Parse the result and extract data
            JSONParser jsonParser = new JSONParser();
            Object obj = jsonParser.parse(jsonBody);
            JSONObject payload = (JSONObject) obj;
            if (payload.get("merge_commit_sha") != null) {
                // There is a commit we can parse
                String mergeCommitSHA = (String) payload.get("merge_commit_sha");
                String urlCommit = "https://github.com/" + repoOwner + "/" + repoName + "/commit/" + mergeCommitSHA;
                this.parseCommit(vulnerability, urlCommit);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Method parses Github issues links found in the vulnerability references.
     *
     * @param vulnerability - to inject information into
     * @param issue         - link of the issue e.g. https://github.com/restlet/restlet-framework-java/issues/774
     *
     * The script looks for a pull_request field in the json corresponding to the issue.
     * "pull_request": {
     *   "url": "https://api.github.com/repos/python/cpython/pulls/32",
     *   "html_url": "https://github.com/python/cpython/pull/32",
     *   "diff_url": "https://github.com/python/cpython/pull/32.diff",
     *   "patch_url": "https://github.com/python/cpython/pull/32.patch"
     *  }
     *  Once the pull_request field is found, we parse the PR, which will lead to a commit.
     */
    public void parseIssues(Vulnerability vulnerability, String issue) {
        String jsonBody = null;
        try {
            // Extract information from the patch and create API Link
            String[] infoPatch = issue.split("/");
            String repoOwner = infoPatch[3];
            String repoName = infoPatch[4];
            String issueNumber = infoPatch[6];
            // Query GHTorrent to find the corresponding Pull Request
            FindIterable<Document> mongoElement = mongoIssuesCollection.find(and(eq("repo", repoName),
                    eq("owner", repoOwner), eq("number", issueNumber)));
            if (mongoElement.first() != null) {
                jsonBody = mongoElement.first().toJson();
            }
            // If GhTorrent does not find it, query Github API
            if (jsonBody == null) {
                String apiLink = "https://api.github.com/repos/" + repoOwner + "/" + repoName + "/issues/" + issueNumber;
                // Send GET request
                jsonBody = httpClient.sendGet(apiLink);
                // TODO: If it was not on GHTorrent, write it in there (?)
            }

            // Look for a pull_request and use the parsePullRequest function
            // Parse the result and extract data
            JSONParser jsonParser = new JSONParser();
            Object obj = jsonParser.parse(jsonBody);
            JSONObject payload = (JSONObject) obj;
            if (payload.get("pull_request") != null) {
                // There is a commit we can parse
                JSONObject pullRequest = (JSONObject) payload.get("pull_request");
                String urlPullRequest = (String) pullRequest.get("html_url");
                this.parsePullRequest(vulnerability, urlPullRequest);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Parses patch links to git commits using GitHub API v3.
     * Extracts the following information:
     * - files changed
     * - methods affected
     * - days it took to fix
     *
     * @param vulnerability object to inject information
     * @param patchLink     URL to the git commit
     */
    public void parseCommit(Vulnerability vulnerability, String patchLink) {
        String jsonBody = null;
        try {
            // Extract information from the patch and create API Link
            String[] infoPatch = patchLink.split("/");
            String commitHash = infoPatch[6];
            // Query GHTorrent with the hash of the commit
            FindIterable<Document> mongoElement = mongoCommitsCollection.find(eq("sha", commitHash));
            if (mongoElement.first() != null) {
                jsonBody = mongoElement.first().toJson();
            }

            // If GHTorrent does not find it, query Github API
            if (jsonBody == null) {
                String repoOwner = infoPatch[3];
                String repoName = infoPatch[4];
                String apiLink = "https://api.github.com/repos/" + repoOwner + "/" + repoName + "/commits/" + commitHash;
                // Send GET request
                jsonBody = httpClient.sendGet(apiLink);
                // TODO: If it was not on GHTorrent, write it in there (?)
            }

            // Parse the result and extract data
            JSONParser jsonParser = new JSONParser();
            Object obj = jsonParser.parse(jsonBody);
            JSONObject payload = (JSONObject) obj;
            JSONObject commit = (JSONObject) payload.get("commit");
            JSONObject author = (JSONObject) commit.get("author");
            String date = (String) author.get("date");
            vulnerability.setDaysToFix(getDurationFixing(date, vulnerability.getPublishedDate()));
            List<Object> files = (List<Object>) payload.get("files");
            for (Object file : files) {
                JSONObject fileObj = (JSONObject) file;
                String filenameChanged = (String) fileObj.get("filename");
                if (fileObj.get("patch") != null) {
                    List<Vulnerability.Hunk> hunks = getPatchHunks(fileObj.get("patch").toString(), date);
                    // TODO: Check if the File already exists --> add to it in that case
                    vulnerability.addVulnerableFile(new Vulnerability.File(filenameChanged, hunks, date));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Extracts the hunks from the commit information.
     *
     * @param patch     - String representing the patch information
     * @param patchDate - Date when the patch was applied
     * @return
     */
    private List<Vulnerability.Hunk> getPatchHunks(String patch, String patchDate) {
        List<Vulnerability.Hunk> linesAffected = new ArrayList<>();
        String[] linesPatch = patch.split("\n");
        for (String line : linesPatch) {
            String hunk = StringUtils.substringBetween(line, "@@");
            if (hunk != null) {
                int lineNumber = Integer.parseInt(hunk.split(",")[0].split("-")[1]);
                linesAffected.add(new Vulnerability.Hunk(lineNumber, patchDate));
            }
        }
        return linesAffected;
    }

    /**
     * Enriches the vulnerability with information found from Research.
     * 1. Commits found here: https://arxiv.org/abs/1902.02595
     * @param vulnerability - to inject information into
     */
    private void enrichInformation(Vulnerability vulnerability) {
//        vulnerability.addPatch(extraCommits.get(vulnerability.getId()));
    }

    public void parseReferences(Vulnerability vulnerability) {
        // Parse all
        for (String ref : vulnerability.getReferences()) {
            // Case 1: Git commit
            if (ref.matches("https://github\\.com/.*/.*/commit/.*")) {
                parseCommit(vulnerability, ref);
            }
            // Case 2: Git Pull request
            if (ref.matches("https://github\\.com/.*/.*/pull/.*")) {
                parsePullRequest(vulnerability, ref);
            }
            // Case 3: Git Issues
            if (ref.matches("https://github\\.com/.*/.*/issues/.*")) {
                parseIssues(vulnerability, ref);
            }
        }
    }

    public static void main(String[] args) {
    }

}

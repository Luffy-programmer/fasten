package eu.fasten.analyzer.vulnerabilityplugin;

import eu.fasten.analyzer.vulnerabilityplugin.utils.MongoConnector;
import picocli.CommandLine;

import java.util.Optional;

/**
 * Makes vulnerability-plugin module runnable from command line.
 */
@CommandLine.Command(name = "Vulnerability")
public class Main implements Runnable {

    @CommandLine.Option(names = {"-d", "--database"},
            paramLabel = "dbURL",
            description = "Database URL for connection",
            defaultValue = "jdbc:postgresql:postgres")
    String dbUrl;

    @CommandLine.Option(names = {"-u", "--user"},
            paramLabel = "dbUser",
            description = "Database user name",
            defaultValue = "postgres")
    String dbUser;

    @CommandLine.Option(names = {"-um", "--user_mongo"},
            paramLabel = "mongoUser",
            description = "Mongo Database user name",
            defaultValue = "user")
    String mongoUser;

    @CommandLine.Option(names = {"-dam", "--db_auth_mongo"},
            paramLabel = "dbAuthMongo",
            description = "Database where the user is identified",
            defaultValue = "admin")
    String dbAuthMongo;

    @CommandLine.Option(names = {"-mp", "--mongo_password"},
            paramLabel = "mongoUser",
            description = "Mongo Database user name",
            defaultValue = "password")
    String mongoPassword;

    @CommandLine.Option(names = {"-dbm", "--db_mongo"},
            paramLabel = "mongoUser",
            description = "Mongo Database to connect to",
            defaultValue = "password")
    String dbMongo;

    public static void main(String[] args) {
        final int exitCode = new CommandLine(new Main()).execute(args);
        System.exit(exitCode);
    }

    @Override
    public void run() {
        var vulnProducer = new VulnerabilityPlugin.VulnerabilityProducer();
        MongoConnector.MongoContext context = new MongoConnector.MongoContext(mongoUser, dbAuthMongo, mongoPassword, dbMongo);
        vulnProducer.setMongoConnection(context);
        while (true) {
            Optional<String> out = vulnProducer.produce();
            if (!out.isEmpty()) {
                System.out.println("PAYLOAD: " + out.get());
            } else {
                System.out.println("PAYLOAD: Empty");
            }
        }
    }
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityplugin;

import eu.fasten.analyzer.vulnerabilityplugin.utils.connections.MongoConnector;
import java.util.Optional;
import picocli.CommandLine;


/**
 * Makes vulnerability-plugin module runnable from command line.
 */
@CommandLine.Command(name = "Vulnerability")
public class Main implements Runnable {
    @CommandLine.Option(names = {"-mu", "--mongo_user"},
            paramLabel = "mongoUser",
            description = "Mongo Database user name",
            defaultValue = "user")
    String mongoUser;

    @CommandLine.Option(names = {"-dam", "--db_auth_mongo"},
            paramLabel = "dbAuthMongo",
            description = "Database where the user is identified",
            defaultValue = "admin")
    String dbAuthMongo;

    @CommandLine.Option(names = {"-mp", "--mongo_password"},
            paramLabel = "mongoPassword",
            description = "Password to log in into MongoDB",
            defaultValue = "password")
    String mongoPassword;

    @CommandLine.Option(names = {"-mdb", "--mongo_db"},
            paramLabel = "mongoDatabase",
            description = "Mongo Database to connect to",
            defaultValue = "github")
    String dbMongo;

    @CommandLine.Option(names = {"-ght", "--gh_token"},
            paramLabel = "ghToken",
            description = "GitHub token to perform requests",
            defaultValue = "<no_default>")
    String ghToken;


    public static void main(String[] args) {
        final int exitCode = new CommandLine(new Main()).execute(args);
        System.exit(exitCode);
    }

    @Override
    public void run() {
        var vulnProducer = new VulnerabilityPlugin.VulnerabilityProducer();
        MongoConnector.MongoContext context = new MongoConnector.MongoContext(mongoUser,
                dbAuthMongo, mongoPassword, dbMongo);
        String host = "127.0.0.1";
        vulnProducer.createParserManager(host, context);
        while (true) {
            Optional<String> out = vulnProducer.produce();
            if (!out.isEmpty()) {
                System.out.println("PAYLOAD: " + out.get());
            } else {
                System.out.println("PAYLOAD: Empty");
            }
        }
    }
}

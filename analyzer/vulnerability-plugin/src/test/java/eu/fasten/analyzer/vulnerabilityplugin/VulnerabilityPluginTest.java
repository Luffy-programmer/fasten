/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityplugin;

import eu.fasten.analyzer.vulnerabilityplugin.db.MetadataUtility;
import eu.fasten.analyzer.vulnerabilityplugin.utils.Vulnerability;
import eu.fasten.analyzer.vulnerabilityplugin.utils.parsers.ParserManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.HashSet;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

public class VulnerabilityPluginTest {

    private VulnerabilityPlugin.VulnerabilityProducer vulnerabilityProducer;
    ParserManager parserMock = Mockito.mock(ParserManager.class);
    MetadataUtility muMock = Mockito.mock(MetadataUtility.class);

    @BeforeEach
    public void setUp() {
        vulnerabilityProducer = new VulnerabilityPlugin.VulnerabilityProducer();
        vulnerabilityProducer.injectParserManager(parserMock);
        vulnerabilityProducer.setMetadataUtility(muMock);
    }

    @Test
    public void nameTest() {
        var name = "Vulnerability Plugin";
        assertEquals(name, vulnerabilityProducer.name());
    }

    @Test
    public void checkDescription() {
        var description = "Vulnerability plugin. "
                + "Downloads CVE entries from the NVD Database, enriches"
                + " them with method-level details and publishes to Kafka topic";
        assertEquals(description, vulnerabilityProducer.description());
    }

    @Test
    public void produceTest() {
        try {
            HashSet<Vulnerability> vhs = new HashSet<>();
            vhs.add(new Vulnerability("ID-1"));
            vhs.add(new Vulnerability("ID-2"));
            when(parserMock.getVulnerabilitiesFromParsers()).thenReturn(vhs);
            doNothing().when(muMock).injectVulnerabilityIntoDB(Mockito.any());

            // Set the producer thread with the parserMock
            VulnerabilityPlugin.ProducerThread prt = new VulnerabilityPlugin.ProducerThread(vulnerabilityProducer.getQueue(), parserMock);
            vulnerabilityProducer.setProducerThread(prt);
            vulnerabilityProducer.getProducerThread().start();

            vulnerabilityProducer.queue.add(new Vulnerability("ID-DUMMY"));
            Optional res = vulnerabilityProducer.produce();

            // Wait for ut to be initialized and terminate updater
            sleep(1);
            var pt = vulnerabilityProducer.getProducerThread();
            var ut = pt.getUpdater();
            ut.terminate();

            // Second call, item 1
            Optional res1 = vulnerabilityProducer.produce();
            Vulnerability v1 = new Vulnerability("ID-1");
            // Third call, item 2
            Optional res2 = vulnerabilityProducer.produce();
            Vulnerability v2 = new Vulnerability("ID-2");

            assertEquals(v1.toJson(), res1.get());
            assertEquals(v2.toJson(), res2.get());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void updaterTest() {
        try {
            HashSet<Vulnerability> vhs = new HashSet<>();
            vhs.add(new Vulnerability("ID-1"));
            vhs.add(new Vulnerability("ID-2"));
            when(parserMock.getVulnerabilitiesFromParsers()).thenReturn(vhs);

            HashSet<Vulnerability> vhsu = new HashSet<>();
            vhsu.add(new Vulnerability("ID-UPDATE"));
            when(parserMock.getUpdatesFromParsers()).thenReturn(vhsu);
            doNothing().when(parserMock).sleep();
            doNothing().when(muMock).injectVulnerabilityIntoDB(Mockito.any());

            // Set the producerThread in the producer
            VulnerabilityPlugin.ProducerThread prt = new VulnerabilityPlugin.ProducerThread(vulnerabilityProducer.getQueue(), parserMock);
            vulnerabilityProducer.setProducerThread(prt);
            vulnerabilityProducer.getProducerThread().start();

            vulnerabilityProducer.queue.add(new Vulnerability("ID-DUMMY"));
            Optional res = vulnerabilityProducer.produce();

            // Wait for ut to be initialized
            sleep(1);
            var pt = vulnerabilityProducer.getProducerThread();
            var ut = pt.getUpdater();
            ut.terminate();

            Optional res1 = vulnerabilityProducer.produce();

            Vulnerability v1 = new Vulnerability("ID-1");
            Optional res2 = vulnerabilityProducer.produce();
            Vulnerability v2 = new Vulnerability("ID-2");

            Optional res3 = vulnerabilityProducer.produce();
            Vulnerability updatedV = new Vulnerability("ID-UPDATE");

            assertEquals(updatedV.toJson(), res3.get());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Helper to handle threaded code
     * @param seconds
     */
    private void sleep(int seconds) {

        try {
            TimeUnit.SECONDS.sleep(seconds);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

package eu.fasten.analyzer.vulnerabilityplugin;

import org.apache.kafka.clients.producer.Callback;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class VulnerabilityPluginTest {

    private VulnerabilityPlugin.VulnerabilityProducer vulnerabilityProducer;

    @Before
    public void setUp() {
        vulnerabilityProducer = new VulnerabilityPlugin.VulnerabilityProducer();
        vulnerabilityProducer.setProducerTopic("vulnerability");
    }

    @Test
    public void nameTest() {
        var name = "Vulnerability Plugin";
        assertEquals(name, vulnerabilityProducer.name());
    }

    @Test
    public void checkDescription() {
        var description = "Vulnerability plugin. "
                + "Downloads CVE entries from the NVD Database, enriches"
                + " them with method-level details and publishes to Kafka topic";
        assertEquals(description, vulnerabilityProducer.description());
    }

    @Test
    public void testTopicName() {
        var topic = "vulnerability";
        assertEquals(topic, vulnerabilityProducer.producerTopic());
    }

    @Test
    public void sendToKafkaTest() {
        KafkaProducer<Object, String> mockProducer = Mockito.mock(KafkaProducer.class);
        vulnerabilityProducer.setKafkaProducer(mockProducer);
        when(mockProducer.send(any(ProducerRecord.class), any(Callback.class))).thenReturn(null);
    }

}

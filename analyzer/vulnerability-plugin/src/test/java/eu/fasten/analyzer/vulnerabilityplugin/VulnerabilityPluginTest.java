/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityplugin;

import eu.fasten.analyzer.vulnerabilityplugin.utils.parsers.NVDParser;
import eu.fasten.analyzer.vulnerabilityplugin.utils.Vulnerability;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.owasp.dependencycheck.data.nvd.json.DefCveItem;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

public class VulnerabilityPluginTest {

    private VulnerabilityPlugin.VulnerabilityProducer vulnerabilityProducer;
    NVDParser parserMock = Mockito.mock(NVDParser.class);
    File file = new File("/path/to/nothing/");


    @Before
    public void setUp() {
        vulnerabilityProducer = new VulnerabilityPlugin.VulnerabilityProducer();
        vulnerabilityProducer.injectParser(parserMock);
    }

    @Test
    public void nameTest() {
        var name = "Vulnerability Plugin";
        assertEquals(name, vulnerabilityProducer.name());
    }

    @Test
    public void checkDescription() {
        var description = "Vulnerability plugin. "
                + "Downloads CVE entries from the NVD Database, enriches"
                + " them with method-level details and publishes to Kafka topic";
        assertEquals(description, vulnerabilityProducer.description());
    }

    @Test
    public void produceTest() {
        try {
            // Setup variables
            List<File> files = new ArrayList<>();
            files.add(file);
            List<DefCveItem> items = new ArrayList<>();
            DefCveItem item1 = new DefCveItem();
            item1.setPublishedDate("FIRST_ONE");
            DefCveItem item2 = new DefCveItem();
            item2.setPublishedDate("SECOND_ONE");
            items.add(item1);
            items.add(item2);
            when(parserMock.downloadCVEs(Mockito.any())).thenReturn(files);
            when(parserMock.parseCVEZip(file)).thenReturn(items);
            when(parserMock.parseVulnerability(item1)).thenReturn(new Vulnerability("ID-1"));
            when(parserMock.parseVulnerability(item2)).thenReturn(new Vulnerability("ID-2"));

            // First call, expect Optional<EMPTY>
            Optional res = vulnerabilityProducer.produce();
            assertTrue(res.isEmpty());
            // Second call, item 1
            Optional res1 = vulnerabilityProducer.produce();
            Vulnerability v1 = new Vulnerability("ID-1");
            // Third call, item 2
            Optional res2 = vulnerabilityProducer.produce();
            Vulnerability v2 = new Vulnerability("ID-2");
            assertEquals(v1.toJson(), res1.get());
            assertEquals(v2.toJson(), res2.get());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void updaterTest() {
        try {
            File updatesFile = new File("/updates/from/nvd");
            DefCveItem updateVuln = new DefCveItem();
            updateVuln.setPublishedDate("UPDATED_ONE");
            List<DefCveItem> itemsUpdates = new ArrayList<>();
            itemsUpdates.add(updateVuln);
            List<File> files = new ArrayList<>();
            files.add(file);
            List<DefCveItem> items = new ArrayList<>();
            DefCveItem item1 = new DefCveItem();
            item1.setPublishedDate("FIRST_ONE");
            DefCveItem item2 = new DefCveItem();
            item2.setPublishedDate("SECOND_ONE");
            items.add(item1);
            items.add(item2);
            // Skip the wait, do nothing when sleep
            doNothing().when(parserMock).sleep();
            when(parserMock.downloadCVEs(Mockito.any())).thenReturn(files);
            when(parserMock.parseCVEZip(file)).thenReturn(items);
            when(parserMock.parseVulnerability(item1)).thenReturn(new Vulnerability("ID-1"));
            when(parserMock.parseVulnerability(item2)).thenReturn(new Vulnerability("ID-2"));
            when(parserMock.downloadUpdates(Mockito.any())).thenReturn(updatesFile);
            when(parserMock.parseCVEZip(updatesFile)).thenReturn(itemsUpdates);
            when(parserMock.parseVulnerability(updateVuln)).thenReturn(new Vulnerability("ID-UPDATE"));

            Optional res = vulnerabilityProducer.produce();
            assertTrue(res.isEmpty());
            Optional res1 = vulnerabilityProducer.produce();
            Vulnerability v1 = new Vulnerability("ID-1");
            Optional res2 = vulnerabilityProducer.produce();
            Vulnerability v2 = new Vulnerability("ID-2");

            Optional res3 = vulnerabilityProducer.produce();
            Vulnerability updatedV = new Vulnerability("ID-UPDATE");
            assertEquals(updatedV.toJson(), res3.get());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
